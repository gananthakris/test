       L a n g u a g e   P r o c e s s i n g    S y s t e m s


		       C Compilers
		       ===========

A typical C compiler is usually set up as a driver program which
runs other separate programs.  For example, with gcc:

  : Compiler `cc1` :
    Compiled `*.c` C file to `*.s` assembly language file.

  : Assembler `as` :
    Assembles `*.s` assembly language file to `*.o` object file.
    The object file is a binary file in a specific format which
    exports certain symbols and imports symbols it depends on.

  : Linker `ld` :
    Links several object files together with libraries to produce
    an executable.  There are two kinds of linkers:

     + *Static linker*: Links in all code and produces a fully
       self-contained executable.

     + *Dynamic linker*: Links in all the object files but only links
       in references to the libraries.  The executable is not
       self-contained and the libraries will be linked in when the
       executable is run.

    Most modern systems use *Dynamic Linked Libraries* (DLLs).  There
    are disadvantages like .<https://en.wikipedia.org/wiki/DLL_Hell>
    "DLL Hell", but has big advantages like smaller executables and
    the possibility of having multiple concurrently executing programs
    share the same library code in memory (AKA *Dynamic Shared
    Objects*, explaining the `.so` library extension used in Unix).


       		     A Demo Program
		     ==============

File .<code/c-demo/main.c> main.c:

.include("code/c-demo/main.c")

File .<code/c-demo/f1.c> f1.c:

.include("code/c-demo/f1.c")

File .<code/c-demo/f2.c> f2.c:

.include("code/c-demo/f2.c")

 .<code/c-demo/f1.s> f1.s assembly code;  .<code/c-demo/f2.s> f2.s assembly code.




		       Compiler Flow
		       =============

.visjs(options="{
  nodes: {
    shape: 'box',
  },
  edges: {
    arrows: 'to',
  },
  layout: {
    hierarchical: {
      direction: 'UD',
      sortMethod: 'directed',
    },
  }
}"
)
```
function f() {
  const nodes = [
    { id: "f1_c", label: "Source File\nf1.c", level: 0, },
    { id: "main_c", label: "Source File\nmain.c", level: 0, },
    { id: "f2_c", label: "Source File\nf2.c", level: 0, },

    { id: "cc1_f1", label: "Compiler\ncc1", shape: "ellipse",
      color: "coral", level: 1,  },
    { id: "cc1_main", label: "Compiler\ncc1", shape: "ellipse",
      color: "coral",  level: 1,},
    { id: "cc1_f2", label: "Compiler\ncc1", shape: "ellipse",
      color: "coral",  level: 1, },

    { id: "f1_s", label: "Assembly File\nf1.s",  level: 2,},
    { id: "main_s", label: "Assembly File\nmain.s",  level: 2,},
    { id: "f2_s", label: "Assembly File\nf2.s",  level: 2,},

    { id: "as_f1", label: "Assembler as", shape: "ellipse",
      color: "coral",  level: 3, },
    { id: "as_main", label: "Assembler as", shape: "ellipse",
      color: "coral", level: 3, },
    { id: "as_f2", label: "Assembler as", shape: "ellipse",
      color: "coral", level: 3, },

    { id: "f1_o", label: "Object File\nf1.o", level: 4, },
    { id: "main_o", label: "Object File\nmain.o", level: 4, },
    { id: "f2_o", label: "Object File\nf2.o", level: 4, },

    { id: "libs", label: "Libraries\n(printf, atoi)", level: 4, },

    { id: "libs2", label: "Runtime\nLibraries\n(printf, atoi)", level: 5, },
    { id: "linker", label: "Linker ld", shape: "ellipse",
      color: "coral", level: 5, },

    { id: "dld", label: "Dynamic Linker", shape: "ellipse",
      color: "coral", level: 6, },
    { id: "exec", label: "Executable", level: 6, },


    { id: "in", label: "3 4", shape: "text", level: 7, },
    { id: "run", label: "Run", shape: "ellipse", color: "coral", level: 7, },
    { id: "out", label: "19", shape: "text", level: 7, },
  ];
  const edges = [
    { from: "f1_c", to: "cc1_f1", },
    { from: "main_c", to: "cc1_main", },
    { from: "f2_c", to: "cc1_f2", },

    { from: "cc1_f1", to: "f1_s", },
    { from: "cc1_main", to: "main_s", },
    { from: "cc1_f2", to: "f2_s", },

    { from: "f1_s", to: "as_f1", },
    { from: "main_s", to: "as_main", },
    { from: "f2_s", to: "as_f2", },
  
    { from: "as_f1", to: "f1_o", },
    { from: "as_main", to: "main_o", },
    { from: "as_f2", to: "f2_o", },

    { from: "libs", to: "linker", },
    { from: "f1_o", to: "linker", },
    { from: "main_o", to: "linker", },
    { from: "f2_o", to: "linker", },

    { from: "linker", to: "exec", },
    { from: "libs2", to: "dld", },


    { from: "dld", to: "run", },
    { from: "exec", to: "run", },
    { from: "in", to: "run", label: "input", },
    { from: "run", to: "out", label: "output", },

   ];

   return { nodes, edges, };  
}

```